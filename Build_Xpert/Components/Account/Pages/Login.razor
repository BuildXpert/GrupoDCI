@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Build_Xpert.Model

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión</PageTitle>

<div class="container-fluid vh-100 d-flex justify-content-center align-items-center" style="background-color: #222831;">
    <div class="row w-75 shadow-lg rounded d-flex align-items-center" style="background-color: #ffffff;">
        <!-- Imagen de fondo (oculta en móviles) -->
        <div class="col-md-6 d-none d-md-flex justify-content-center align-items-center">
            <img src="https://i.ibb.co/zLLhRkr/image-2025-02-28-145030625.png" alt="Login Image" class="img-fluid" style="max-width: 70%; height: auto; object-fit: contain;">
        </div>

        <!-- Formulario de Login -->
        <div class="col-md-6 p-5">
            <h2 class="text-center mb-4 text-dark">Bienvenido</h2>

            <StatusMessage Message="@errorMessage" />

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="loginForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" placeholder="Correo electrónico" />
                    <label for="Input.Email">Correo Electrónico</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" placeholder="Contraseña" />
                    <label for="Input.Password">Contraseña</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
                    <label class="form-check-label" for="rememberMe">Recordarme</label>
                </div>

                <button type="submit" class="btn btn-dark btn-lg w-100">
                    <i class="fas fa-sign-in-alt"></i> Iniciar Sesión
                </button>

                <div class="text-center mt-3">
                    <a href="Account/ForgotPassword" class="text-decoration-none">¿Olvidaste tu contraseña?</a>
                </div>

                <hr class="my-4">

                <div class="text-center">
                    <p>¿No tienes cuenta? <a href="@NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })" class="text-decoration-none">Regístrate</a></p>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginUser Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("Usuario ha iniciado sesión correctamente.");

            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null)
            {
                var roles = await UserManager.GetRolesAsync(user);
                var role = roles.FirstOrDefault();

                // Redirigir según el rol del usuario
                string redirectUrl = role switch
                {
                    "Cliente" => "/dashboard-cliente",
                    "MOBS" => "/dashboard-mob",
                    "Admin" => "/dashboard-admin",
                    "Bancario" => "/dashboard-bancario",
                    _ => "/"
                };

                // Redirección corregida con NavigationManager
                NavigationManager.NavigateTo(redirectUrl, forceLoad: true);
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else if (result.RequiresTwoFactor)
        {
            NavigationManager.NavigateTo("Account/LoginWith2fa");
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Cuenta bloqueada.");
            NavigationManager.NavigateTo("Account/Lockout");
        }
        else
        {
            errorMessage = "⚠ Error: Usuario o contraseña incorrectos.";
        }
    }

}
