@page "/proveedor-details/{id:int}"
@using Build_Xpert.Model
@using Build_Xpert.Services
@inject ProveedorService ProveedorService
@inject ProjectService ProjectService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<style>
    .proveedor-container {
        max-width: 2000px;
        margin: auto;
        padding: px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background: white;
    }

    .btn-action {
        margin: 5px;
    }

    .tab-content {
        padding: 100px;
    }
</style>

<div class="container mt-5">
    <div class="proveedor-container">
        <h2>Detalles del Proveedor</h2>

        @if (proveedor == null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-2">Cargando información...</p>
            </div>
        }
        else
        {
            <div>
                <p><strong>📌 Nombre:</strong> @proveedor.Nombre</p>
                <p><strong>🏗 Servicio:</strong> @proveedor.TipoServicio</p>
                <p><strong>📞 Contacto:</strong> @proveedor.Contacto</p>
                <p><strong>📍 Dirección:</strong> @proveedor.Direccion</p>
                <p><strong>Estado:</strong> <span class="badge @(proveedor.Estado == "Activo" ? "bg-success" : "bg-secondary")">@proveedor.Estado</span></p>
            </div>

            <div class="mt-4">
                <button class="btn btn-primary btn-action" @onclick="ShowEdit">Editar</button>
                <button class="btn btn-danger btn-action" @onclick="DeleteProveedor">Eliminar</button>
            </div>

            <!-- Tabs -->
            <ul class="nav nav-tabs mt-4">
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "pagos" ? "active" : "")" @onclick="@(() => ChangeTab("pagos"))">Pagos</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "pedidos" ? "active" : "")" @onclick="@(() => ChangeTab("pedidos"))">Pedidos y Reservas</button>
                </li>
            </ul>

            <!-- Contenido de las pestañas -->
            <div class="tab-content">
                @if (activeTab == "pagos")
                {
                    <div>
                        <h5>Registrar Pago</h5>
                        <div class="row">
                            <div class="col-md-4">
                                <label>Monto</label>
                                <input type="number" class="form-control" @bind="nuevoPago.Monto" />
                                <span class="text-danger" if="@showErrorPago && nuevoPago.Monto <= 0">El monto es obligatorio y debe ser mayor a 0.</span>
                            </div>
                            <div class="col-md-4">
                                <label>Fecha</label>
                                <input type="date" class="form-control" @bind="nuevoPago.Fecha" />
                                <span class="text-danger" if="@showErrorPago && nuevoPago.Fecha == default">La fecha es obligatoria.</span>
                            </div>
                            <div class="col-md-4">
                                <button class="btn btn-success mt-4" @onclick="RegistrarPago">Guardar Pago</button>
                            </div>
                        </div>

                        <h5 class="mt-4">Historial de Pagos</h5>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Fecha</th>
                                    <th>Monto</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pago in historialPagos)
                                {
                                    <tr>
                                        <td>@pago.Fecha.ToShortDateString()</td>
                                        <td>@pago.Monto.ToString("C")</td>
                                        <td>
                                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarPago(pago.Id)">Eliminar</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (activeTab == "pedidos")
                {
                    <div>
                        <h5>Crear Pedido</h5>
                        <div class="row">
                            <div class="col-md-3">
                                <label>Material</label>
                                <input type="text" class="form-control" @bind="nuevoPedido.Material" />
                                <span class="text-danger" if="@showErrorPedido && string.IsNullOrWhiteSpace(nuevoPedido.Material)">El material es obligatorio.</span>
                            </div>
                            <div class="col-md-2">
                                <label>Cantidad</label>
                                <input type="number" class="form-control" @bind="nuevoPedido.Cantidad" />
                                <span class="text-danger" if="@showErrorPedido && nuevoPedido.Cantidad <= 0">La cantidad debe ser mayor a 0.</span>
                            </div>
                            <div class="col-md-4">
                                <label>Descripción</label>
                                <input type="text" class="form-control" @bind="nuevoPedido.Descripcion" />
                                <span class="text-danger" if="@showErrorPedido && string.IsNullOrWhiteSpace(nuevoPedido.Descripcion)">La descripción es obligatoria.</span>
                            </div>
                            <div class="col-md-3">
                                <label>Proyecto</label>
                                <select class="form-control" @bind="nuevoPedido.ProjectId">
                                    <option value="">-- Selecciona un proyecto --</option>
                                    @foreach (var proyecto in proyectos)
                                    {
                                        <option value="@proyecto.Id">@proyecto.Name</option>
                                    }
                                </select>
                                <span class="text-danger" if="@showErrorPedido && nuevoPedido.ProjectId == 0">Debe seleccionar un proyecto.</span>
                            </div>
                            <div class="col-md-3 mt-2">
                                <label>Precio</label>
                                <input type="number" step="0.01" class="form-control" @bind="nuevoPedido.Monto" />
                                <span class="text-danger" if="@showErrorPedido && nuevoPedido.Precio <= 0">El precio es obligatorio.</span>
                            </div>
                            <div class="col-12 mt-3">
                                <button class="btn btn-primary" @onclick="RegistrarPedido">Guardar Pedido</button>
                            </div>
                        </div>


                        <h5 class="mt-4">Historial de Pedidos</h5>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Material</th>
                                    <th>Cantidad</th>
                                    <th>Descripción</th>
                                    <th>Fecha</th>
                                    <th>Proyecto</th>
                                    <th>Precio</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pedido in historialPedidos)
                                {
                                    <tr>
                                        <td>@pedido.Material</td>
                                        <td>@pedido.Cantidad</td>
                                        <td>@pedido.Descripcion</td>
                                        <td>@pedido.FechaPedido.ToShortDateString()</td>
                                        <td>@pedido.Project?.Name</td>
                                        <td>₡@pedido.Monto.ToString("N2")</td>
                                        <td>
                                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarPedido(pedido.Id)">Eliminar</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- MODAL PARA EDITAR PROVEEDOR -->
@if (showEditModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Proveedor</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="nombre" @bind="editProveedor.Nombre">
                    </div>
                    <div class="mb-3">
                        <label for="tipoServicio" class="form-label">Tipo de Servicio</label>
                        <input type="text" class="form-control" id="tipoServicio" @bind="editProveedor.TipoServicio">
                    </div>
                    <div class="mb-3">
                        <label for="contacto" class="form-label">Contacto</label>
                        <input type="text" class="form-control" id="contacto" @bind="editProveedor.Contacto">
                    </div>
                    <div class="mb-3">
                        <label for="direccion" class="form-label">Dirección</label>
                        <input type="text" class="form-control" id="direccion" @bind="editProveedor.Direccion">
                    </div>
                    <div class="mb-3">
                        <label for="estado" class="form-label">Estado</label>
                        <select class="form-control" id="estado" @bind="editProveedor.Estado">
                            <option value="Activo">Activo</option>
                            <option value="Inactivo">Inactivo</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseEditModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="GuardarCambios" disabled="@showEditError">Guardar Cambios</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public int Id { get; set; }

    private Proveedor proveedor;
    private List<PagoProveedor> historialPagos = new();
    private List<PedidoProveedor> historialPedidos = new();
    private List<Project> proyectos = new();

    private PagoProveedor nuevoPago = new();
    private PedidoProveedor nuevoPedido = new();

    private string activeTab = "pagos";
    private Proveedor editProveedor = new();
    private bool showEditModal = false;

    private bool showEditError => string.IsNullOrWhiteSpace(editProveedor.Nombre) ||
                                  string.IsNullOrWhiteSpace(editProveedor.TipoServicio) ||
                                  string.IsNullOrWhiteSpace(editProveedor.Contacto) ||
                                  string.IsNullOrWhiteSpace(editProveedor.Direccion);

    private bool showErrorPago => nuevoPago.Monto <= 0 || nuevoPago.Fecha == default;

    private bool showErrorPedido => string.IsNullOrWhiteSpace(nuevoPedido.Material) ||
                                    nuevoPedido.Cantidad <= 0 ||
                                    string.IsNullOrWhiteSpace(nuevoPedido.Descripcion) ||
                                    nuevoPedido.ProjectId == 0 ||
                                    nuevoPedido.Monto <= 0;

    protected override async Task OnInitializedAsync()
    {
        proveedor = await ProveedorService.GetProveedorByIdAsync(Id);
        historialPagos = await ProveedorService.GetPagosByProveedorIdAsync(Id);
        historialPedidos = await ProveedorService.GetPedidosByProveedorIdAsync(Id);
        proyectos = await ProjectService.GetProjectsAsync();
    }

    private void ChangeTab(string tab) => activeTab = tab;

    private void ShowEdit()
    {
        editProveedor = new Proveedor
            {
                Id = proveedor.Id,
                Nombre = proveedor.Nombre,
                TipoServicio = proveedor.TipoServicio,
                Contacto = proveedor.Contacto,
                Direccion = proveedor.Direccion,
                Estado = proveedor.Estado
            };
        showEditModal = true;
    }

    private void CloseEditModal() => showEditModal = false;

    private async Task GuardarCambios()
    {
        if (showEditError) return;

        await ProveedorService.UpdateProveedorAsync(editProveedor);
        proveedor = await ProveedorService.GetProveedorByIdAsync(Id);
        showEditModal = false;
    }

    private async Task RegistrarPago()
    {
        if (showErrorPago) return;

        nuevoPago.ProveedorId = Id;
        nuevoPago.Fecha = nuevoPago.Fecha == default ? DateTime.Now : nuevoPago.Fecha;

        await ProveedorService.AddPagoAsync(nuevoPago);
        historialPagos = await ProveedorService.GetPagosByProveedorIdAsync(Id);
        nuevoPago = new();
    }

    private async Task RegistrarPedido()
    {
        if (showErrorPedido) return;

        nuevoPedido.ProveedorId = Id;
        nuevoPedido.FechaPedido = DateTime.Now;

        await ProveedorService.AddPedidoAsync(nuevoPedido);
        historialPedidos = await ProveedorService.GetPedidosByProveedorIdAsync(Id);
        nuevoPedido = new();
    }

    private async Task EliminarPago(int id)
    {
        await ProveedorService.DeletePagoAsync(id);
        historialPagos = await ProveedorService.GetPagosByProveedorIdAsync(Id);
    }

    private async Task EliminarPedido(int id)
    {
        await ProveedorService.DeletePedidoAsync(id);
        historialPedidos = await ProveedorService.GetPedidosByProveedorIdAsync(Id);
    }

    private async Task DeleteProveedor()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Eliminar este proveedor?"))
        {
            await ProveedorService.DeleteProveedorAsync(proveedor.Id);
            Navigation.NavigateTo("/proveedores");
        }
    }
}
