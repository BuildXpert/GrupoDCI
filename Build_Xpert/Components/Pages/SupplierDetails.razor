@page "/Supplier-details/{id:int}"
@using Build_Xpert.Model
@using Build_Xpert.Services
@inject SupplierService ProveedorService
@inject ProjectService ProjectService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<style>
    .proveedor-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        background: white;
    }

    .proveedor-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #eee;
    }

    .proveedor-info {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .info-card {
        background: #f9f9f9;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

        .info-card h5 {
            color: #555;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .info-card p {
            font-size: 1.1rem;
            margin: 0;
            font-weight: 500;
        }

    .badge {
        font-size: 0.85rem;
        padding: 0.35rem 0.75rem;
    }

    .btn-action {
        min-width: 120px;
        margin: 0.5rem;
    }

    .nav-tabs {
        border-bottom: 2px solid #dee2e6;
        margin-bottom: 1.5rem;
    }

        .nav-tabs .nav-link {
            border: none;
            color: #6c757d;
            font-weight: 500;
            padding: 0.75rem 1.5rem;
        }

            .nav-tabs .nav-link.active {
                color: #0d6efd;
                border-bottom: 3px solid #0d6efd;
                background: transparent;
            }

    .tab-content {
        padding: 1.5rem 0;
    }

    .form-section {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 2rem;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .table {
        margin-top: 1rem;
    }

        .table th {
            background: #f1f5f9;
            font-weight: 600;
        }

    .pagination {
        justify-content: center;
        margin-top: 1.5rem;
    }

    .filter-section {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

    .filter-input {
        flex: 1;
        min-width: 200px;
    }

    .modal-content {
        border: none;
        box-shadow: 0 5px 20px rgba(0,0,0,0.15);
    }

    .modal-header {
        border-bottom: 1px solid #eee;
    }

    .modal-footer {
        border-top: 1px solid #eee;
    }

    @@media (max-width: 768px) {
        .proveedor-container {
            padding: 1rem;
        }

        .proveedor-info {
            grid-template-columns: 1fr;
        }

        .filter-section {
            flex-direction: column;
        }

        .filter-input {
            width: 100%;
        }
    }
</style>

<div class="container-fluid">
    <div class="proveedor-container">
        @if (proveedor == null)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-3">Cargando información del proveedor...</p>
            </div>
        }
        else
        {
            <div class="proveedor-header">
                <h2 class="mb-0">Detalles del Proveedor</h2>
                <div>
                    <button class="btn btn-primary btn-action" @onclick="ShowEdit">
                        <i class="fas fa-edit me-2"></i>Editar
                    </button>
                    <button class="btn btn-outline-danger btn-action" @onclick="DeleteProveedor">
                        <i class="fas fa-trash-alt me-2"></i>Eliminar
                    </button>
                </div>
            </div>

            <div class="proveedor-info">
                <div class="info-card">
                    <h5><i class="fas fa-signature me-2"></i>Nombre</h5>
                    <p>@proveedor.Name</p>
                </div>

                <div class="info-card">
                    <h5><i class="fas fa-tools me-2"></i>Servicio</h5>
                    <p>@proveedor.ServiceType</p>
                </div>

                <div class="info-card">
                    <h5><i class="fas fa-phone-alt me-2"></i>Contacto</h5>
                    <p>@proveedor.Contact</p>
                </div>

                <div class="info-card">
                    <h5><i class="fas fa-map-marker-alt me-2"></i>Dirección</h5>
                    <p>@proveedor.Address</p>
                </div>

                <div class="info-card">
                    <h5><i class="fas fa-circle me-2"></i>Estado</h5>
                    <p>
                        <span class="badge @(proveedor.Status == "Activo" ? "bg-success" : "bg-secondary")">
                            @proveedor.Status
                        </span>
                    </p>
                </div>
            </div>

            <!-- Tabs -->
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "pagos" ? "active" : "")" @onclick="@(() => ChangeTab("pagos"))">
                        <i class="fas fa-money-bill-wave me-2"></i>Pagos
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "pedidos" ? "active" : "")" @onclick="@(() => ChangeTab("pedidos"))">
                        <i class="fas fa-truck-loading me-2"></i>Pedidos
                    </button>
                </li>
            </ul>

            <!-- Contenido de las pestañas -->
            <div class="tab-content">
                @if (activeTab == "pagos")
                {
                    <div>
                        <div class="form-section">
                            <h5><i class="fas fa-plus-circle me-2"></i>Registrar Nuevo Pago</h5>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">Monto</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₡</span>
                                        <input type="number" class="form-control" @bind="nuevoPago.Amount" min="0" step="0.01" />
                                    </div>
                                    @if (showErrorPago && nuevoPago.Amount <= 0)
                                    {
                                        <small class="text-danger">El monto debe ser mayor a 0</small>
                                    }
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Fecha</label>
                                    <input type="date" class="form-control" @bind="nuevoPago.Date" />
                                    @if (showErrorPago && nuevoPago.Date == default)
                                    {
                                        <small class="text-danger">Seleccione una fecha válida</small>
                                    }
                                </div>
                                <div class="col-12">
                                    <button class="btn btn-success" @onclick="RegistrarPago">
                                        <i class="fas fa-save me-2"></i>Guardar Pago
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="filter-section">
                            <div class="filter-input">
                                <label class="form-label">Rango de fechas</label>
                                <div class="input-group">
                                    <input type="date" class="form-control" @bind="pagosFechaInicio" />
                                    <span class="input-group-text">a</span>
                                    <input type="date" class="form-control" @bind="pagosFechaFin" />
                                </div>
                            </div>
                            <div class="filter-input">
                                <label class="form-label">Monto mínimo</label>
                                <input type="number" class="form-control" @bind="pagosMontoMinimo"
                                       placeholder="Monto mínimo" />
                            </div>
                        </div>

                        <h5 class="mb-3"><i class="fas fa-history me-2"></i>Historial de Pagos</h5>

                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Fecha</th>
                                        <th>Monto</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pago in pagosPaginados)
                                    {
                                        <tr>
                                            <td>@pago.Date.ToString("dd/MM/yyyy")</td>
                                            <td>₡@pago.Amount.ToString("N2")</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-danger"
                                                        @onclick="() => EliminarPago(pago.Id)"
                                                        title="Eliminar pago">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (pagosTotalPages > 1)
                        {
                            <nav aria-label="Paginación de pagos">
                                <ul class="pagination">
                                    <li class="page-item @(pagosCurrentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => PagosChangePage(pagosCurrentPage - 1)">
                                            &laquo;
                                        </button>
                                    </li>

                                    @for (int i = 1; i <= pagosTotalPages; i++)
                                    {
                                        <li class="page-item @(i == pagosCurrentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => PagosChangePage(i)">@i</button>
                                        </li>
                                    }

                                    <li class="page-item @(pagosCurrentPage == pagosTotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => PagosChangePage(pagosCurrentPage + 1)">
                                            &raquo;
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    </div>
                }
                else if (activeTab == "pedidos")
                {
                    <div>
                        <div class="form-section">
                            <h5><i class="fas fa-plus-circle me-2"></i>Crear Nuevo Pedido</h5>
                            <div class="row g-3">
                                <div class="col-md-3">
                                    <label class="form-label">Material</label>
                                    <input type="text" class="form-control" @bind="nuevoPedido.Material" />
                                    @if (showErrorPedido && string.IsNullOrWhiteSpace(nuevoPedido.Material))
                                    {
                                        <small class="text-danger">El material es obligatorio</small>
                                    }
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">Cantidad</label>
                                    <input type="number" class="form-control" @bind="nuevoPedido.Quantity" min="1" />
                                    @if (showErrorPedido && nuevoPedido.Quantity <= 0)
                                    {
                                        <small class="text-danger">La cantidad debe ser mayor a 0</small>
                                    }
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Precio Unitario</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₡</span>
                                        <input type="number" step="0.01" class="form-control" @bind="nuevoPedido.Amount" />
                                    </div>
                                    @if (showErrorPedido && nuevoPedido.Amount <= 0)
                                    {
                                        <small class="text-danger">El precio es obligatorio</small>
                                    }
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Proyecto</label>
                                    <select class="form-control" @bind="nuevoPedido.ProjectId">
                                        <option value="">-- Selecciona un proyecto --</option>
                                        @foreach (var proyecto in proyectos)
                                        {
                                            <option value="@proyecto.Id">@proyecto.Name</option>
                                        }
                                    </select>
                                    @if (showErrorPedido && nuevoPedido.ProjectId == 0)
                                    {
                                        <small class="text-danger">Debe seleccionar un proyecto</small>
                                    }
                                </div>
                                <div class="col-12">
                                    <label class="form-label">Descripción</label>
                                    <textarea class="form-control" rows="2" @bind="nuevoPedido.Description"></textarea>
                                    @if (showErrorPedido && string.IsNullOrWhiteSpace(nuevoPedido.Description))
                                    {
                                        <small class="text-danger">La descripción es obligatoria</small>
                                    }
                                </div>
                                <div class="col-12">
                                    <button class="btn btn-primary" @onclick="RegistrarPedido">
                                        <i class="fas fa-save me-2"></i>Guardar Pedido
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="filter-section">
                            <div class="filter-input">
                                <label class="form-label">Buscar por material</label>
                                <input type="text" class="form-control" @bind="pedidosFilter"
                                       placeholder="Filtrar por material..." />
                            </div>
                            <div class="filter-input">
                                <label class="form-label">Proyecto</label>
                                <select class="form-control" @bind="pedidosProyectoFilter">
                                    <option value="">Todos los proyectos</option>
                                    @foreach (var proyecto in proyectos)
                                    {
                                        <option value="@proyecto.Id">@proyecto.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="filter-input">
                                <label class="form-label">Rango de fechas</label>
                                <div class="input-group">
                                    <input type="date" class="form-control" @bind="pedidosFechaInicio" />
                                    <span class="input-group-text">a</span>
                                    <input type="date" class="form-control" @bind="pedidosFechaFin" />
                                </div>
                            </div>
                        </div>

                        <h5 class="mb-3"><i class="fas fa-history me-2"></i>Historial de Pedidos</h5>

                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Material</th>
                                        <th>Cantidad</th>
                                        <th>Precio Unitario</th>
                                        <th>Total</th>
                                        <th>Fecha</th>
                                        <th>Proyecto</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pedido in pedidosPaginados)
                                    {
                                        <tr>
                                            <td>@pedido.Material</td>
                                            <td>@pedido.Quantity</td>
                                            <td>₡@pedido.Amount.ToString("N2")</td>
                                            <td>₡@((pedido.Amount * pedido.Quantity).ToString("N2"))</td>
                                            <td>@pedido.RequestDate.ToString("dd/MM/yyyy")</td>
                                            <td>@(pedido.Project?.Name ?? "Sin proyecto")</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-danger"
                                                        @onclick="() => EliminarPedido(pedido.Id)"
                                                        title="Eliminar pedido">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (pedidosTotalPages > 1)
                        {
                            <nav aria-label="Paginación de pedidos">
                                <ul class="pagination">
                                    <li class="page-item @(pedidosCurrentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => PedidosChangePage(pedidosCurrentPage - 1)">
                                            &laquo;
                                        </button>
                                    </li>

                                    @for (int i = 1; i <= pedidosTotalPages; i++)
                                    {
                                        <li class="page-item @(i == pedidosCurrentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => PedidosChangePage(i)">@i</button>
                                        </li>
                                    }

                                    <li class="page-item @(pedidosCurrentPage == pedidosTotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => PedidosChangePage(pedidosCurrentPage + 1)">
                                            &raquo;
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- MODAL PARA EDITAR PROVEEDOR -->
@if (showEditModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title"><i class="fas fa-edit me-2"></i>Editar Proveedor</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Nombre</label>
                            <input type="text" class="form-control" @bind="editProveedor.Name" />
                            @if (string.IsNullOrWhiteSpace(editProveedor.Name))
                            {
                                <small class="text-danger">El nombre es obligatorio</small>
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Tipo de Servicio</label>
                            <input type="text" class="form-control" @bind="editProveedor.ServiceType" />
                            @if (string.IsNullOrWhiteSpace(editProveedor.ServiceType))
                            {
                                <small class="text-danger">El servicio es obligatorio</small>
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Contacto</label>
                            <input type="text" class="form-control" @bind="editProveedor.Contact" />
                            @if (string.IsNullOrWhiteSpace(editProveedor.Contact))
                            {
                                <small class="text-danger">El contacto es obligatorio</small>
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Dirección</label>
                            <input type="text" class="form-control" @bind="editProveedor.Address" />
                            @if (string.IsNullOrWhiteSpace(editProveedor.Address))
                            {
                                <small class="text-danger">La dirección es obligatoria</small>
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Estado</label>
                            <select class="form-control" @bind="editProveedor.Status">
                                <option value="Activo">Activo</option>
                                <option value="Inactivo">Inactivo</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseEditModal">
                        <i class="fas fa-times me-2"></i>Cancelar
                    </button>
                    <button class="btn btn-primary" @onclick="GuardarCambios" disabled="@showEditError">
                        <i class="fas fa-save me-2"></i>Guardar Cambios
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    // Datos principales
    private Supplier proveedor;
    private List<SupplierPayment> historialPagos = new();
    private List<SupplierOrder> historialPedidos = new();
    private List<Project> proyectos = new();

    // Formularios
    private SupplierPayment nuevoPago = new();
    private SupplierOrder nuevoPedido = new();

    // Tabs y modales
    private string activeTab = "pagos";
    private Supplier editProveedor = new();
    private bool showEditModal = false;

    // Filtros para pagos
    private DateTime? pagosFechaInicio;
    private DateTime? pagosFechaFin;
    private decimal? pagosMontoMinimo;

    // Filtros para pedidos
    private string pedidosFilter = "";
    private int pedidosProyectoFilter;
    private DateTime? pedidosFechaInicio;
    private DateTime? pedidosFechaFin;

    // Paginación para pagos
    private int pagosPageSize = 5;
    private int pagosCurrentPage = 1;
    private int pagosTotalPages => (int)Math.Ceiling((double)historialPagos.Count / pagosPageSize);
    private List<SupplierPayment> pagosPaginados => historialPagos
        .Where(p => !pagosFechaInicio.HasValue || p.Date >= pagosFechaInicio.Value)
        .Where(p => !pagosFechaFin.HasValue || p.Date <= pagosFechaFin.Value)
        .Where(p => !pagosMontoMinimo.HasValue || p.Amount >= pagosMontoMinimo.Value)
        .OrderByDescending(p => p.Date)
        .Skip((pagosCurrentPage - 1) * pagosPageSize)
        .Take(pagosPageSize)
        .ToList();

    // Paginación para pedidos
    private int pedidosPageSize = 5;
    private int pedidosCurrentPage = 1;
    private int pedidosTotalPages => (int)Math.Ceiling((double)historialPedidos.Count / pedidosPageSize);
    private List<SupplierOrder> pedidosPaginados => historialPedidos
        .Where(p => string.IsNullOrEmpty(pedidosFilter) ||
               p.Material.Contains(pedidosFilter, StringComparison.OrdinalIgnoreCase))
        .Where(p => pedidosProyectoFilter == 0 || p.ProjectId == pedidosProyectoFilter)
        .Where(p => !pedidosFechaInicio.HasValue || p.RequestDate >= pedidosFechaInicio.Value)
        .Where(p => !pedidosFechaFin.HasValue || p.RequestDate <= pedidosFechaFin.Value)
        .OrderByDescending(p => p.RequestDate)
        .Skip((pedidosCurrentPage - 1) * pedidosPageSize)
        .Take(pedidosPageSize)
        .ToList();

    // Validaciones
    private bool showEditError => string.IsNullOrWhiteSpace(editProveedor.Name) ||
                                 string.IsNullOrWhiteSpace(editProveedor.ServiceType) ||
                                 string.IsNullOrWhiteSpace(editProveedor.Contact) ||
                                 string.IsNullOrWhiteSpace(editProveedor.Address);

    private bool showErrorPago => nuevoPago.Amount <= 0 || nuevoPago.Date == default;

    private bool showErrorPedido => string.IsNullOrWhiteSpace(nuevoPedido.Material) ||
                                   nuevoPedido.Quantity <= 0 ||
                                   string.IsNullOrWhiteSpace(nuevoPedido.Description) ||
                                   nuevoPedido.ProjectId == 0 ||
                                   nuevoPedido.Amount <= 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        proveedor = await ProveedorService.GetProveedorByIdAsync(Id);
        historialPagos = await ProveedorService.GetPagosByProveedorIdAsync(Id);
        historialPedidos = await ProveedorService.GetPedidosByProveedorIdAsync(Id);
        proyectos = await ProjectService.GetProjectsAsync();

        // Resetear paginación al cargar datos
        pagosCurrentPage = 1;
        pedidosCurrentPage = 1;
    }

    private void ChangeTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private void ShowEdit()
    {
        editProveedor = new Supplier
            {
                Id = proveedor.Id,
                Name = proveedor.Name,
                ServiceType = proveedor.ServiceType,
                Contact = proveedor.Contact,
                Address = proveedor.Address,
                Status = proveedor.Status
            };
        showEditModal = true;
    }

    private void CloseEditModal() => showEditModal = false;

    private async Task GuardarCambios()
    {
        if (showEditError) return;

        await ProveedorService.UpdateProveedorAsync(editProveedor);
        proveedor = await ProveedorService.GetProveedorByIdAsync(Id);
        showEditModal = false;
    }

    private async Task RegistrarPago()
    {
        if (showErrorPago) return;

        nuevoPago.SupplierId = Id;
        nuevoPago.Date = nuevoPago.Date == default ? DateTime.Now : nuevoPago.Date;

        await ProveedorService.AddPagoAsync(nuevoPago);
        await LoadData();
        nuevoPago = new();
    }

    private async Task RegistrarPedido()
    {
        if (showErrorPedido) return;

        nuevoPedido.SupplierId = Id;
        nuevoPedido.RequestDate = DateTime.Now;

        await ProveedorService.AddPedidoAsync(nuevoPedido);
        await LoadData();
        nuevoPedido = new();
    }

    private async Task EliminarPago(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar este pago?"))
        {
            await ProveedorService.DeletePagoAsync(id);
            await LoadData();
        }
    }

    private async Task EliminarPedido(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar este pedido?"))
        {
            await ProveedorService.DeletePedidoAsync(id);
            await LoadData();
        }
    }

    private async Task DeleteProveedor()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar este proveedor?"))
        {
            await ProveedorService.DeleteProveedorAsync(proveedor.Id);
            Navigation.NavigateTo("/proveedores");
        }
    }

    // Métodos de paginación
    private void PagosChangePage(int page)
    {
        pagosCurrentPage = page;
    }

    private void PedidosChangePage(int page)
    {
        pedidosCurrentPage = page;
    }
}